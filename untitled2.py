# -*- coding: utf-8 -*-
"""Untitled2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1XoRJ-zGA3d5qY2pIN2h_0ccG6Yxww0ei
"""

# Simple Python program to calculate final velocity

# Given values
u = float(input("Enter initial velocity (u) in m/s: "))
a = float(input("Enter acceleration (a) in m/s^2: "))
t = float(input("Enter time (t) in seconds: "))

# Equation of motion: v = u + at
v = u + a * t

# Display the result
print("Final velocity (v) is:", v, "m/s")

# prompt: newton second law of motion

# Newton's second law of motion: F = ma

def calculate_force(mass, acceleration):
  """Calculates the force based on mass and acceleration.

  Args:
      mass: The mass of the object in kilograms.
      acceleration: The acceleration of the object in meters per second squared.

  Returns:
      The force acting on the object in Newtons.
  """
  force = mass * acceleration
  return force

# Get input from the user
mass = float(input("Enter the mass of the object (kg): "))
acceleration = float(input("Enter the acceleration of the object (m/s^2): "))


# Calculate the force
force = calculate_force(mass, acceleration)

# Display the result
print("The force acting on the object is:", force, "N")

u = float(input("Enter initial velocity (u) in m/s: "))
a = float(input("Enter acceleration (a) in m/s^2: "))
t = float(input("Enter time (t) in seconds: "))


v = u + a * t


print(v, "m/s")

# Newton's Second Law of Motion: F = m * a

# Take input from the user
mass = float(input("Enter mass (in kg): "))
acceleration = float(input("Enter acceleration (in m/s^2): "))

# Calculate force
force = mass * acceleration

# Display the result
print("The force is:", force, "newtons (N)")

import random

responses = {
    "hello": ["Hi there!", "Hello!", "Hey!"],
    "how are you": ["I'm good, thanks!", "Doing great!"],
    "bye": ["Goodbye!", "See you soon!"],
    "default": ["I'm not sure how to respond to that."]
}

def get_response(user_input):
    user_input = user_input.lower()
    return random.choice(responses.get(user_input, responses["default"]))

# Try chatting with it
print("Chatbot: Type 'bye' to end")
while True:
    user_input = input("You: ")
    if user_input.lower() == "bye":
        print("Chatbot:", random.choice(responses["bye"]))
        break
    print("amit:", get_response(user_input))

a = 10
b = 5

print(a == b)
print(a != b)
print(a > b)
print(a < b)
print(a >= 10)
print(b <= 5)

# Install Gradio (run only once)
!pip install gradio

# Import Gradio
import gradio as gr

# Define the function using Newton's Second Law
def calculate_force(mass, acceleration):
    force = mass * acceleration
    return f"Force = {force:.2f} N"

# Create Gradio interface
demo = gr.Interface(
    fn=calculate_force,
    inputs=[
        gr.Slider(0, 100, step=1, label="Mass (kg)"),
        gr.Slider(0, 50, step=0.1, label="Acceleration (m/s²)")
    ],
    outputs="text",
    title="Newton's Second Law Calculator",
    description="Adjust the sliders to calculate Force (F = m × a)"
)

# Launch the app
demo.launch()

!pip install wikipedia-api

import wikipediaapi
# Define your user agent
user_agent = "MyWikipediaApp/1.0 (your_email@example.com)"  # Replace with your info

# Initialize Wikipedia API with user agent and language
wiki = wikipediaapi.Wikipedia(user_agent=user_agent, language='en')
# Initialize Wikipedia API
wiki = wikipediaapi.Wikipedia('en')

# Function to fetch the summary based on the user's question
def get_answer(question):
    try:
        # Search for the Wikipedia page related to the question
        page = wiki.page(question)

        # If the page exists, return the first 500 characters of the summary
        if page.exists():
            return page.summary[0:500]  # Returns the first 500 characters
        else:
            return "Sorry, no answer found for this question."
    except Exception as e:
        return f"An error occurred: {str(e)}"

# Ask the user for a question
question = input("Ask a question: ")
answer = get_answer(question)
print(f"Answer: {answer}")

import wikipediaapi
# Define your user agent
user_agent = "MyWikipediaApp/1.0 (your_email@example.com)"  # Replace with your info

# Initialize Wikipedia API with user agent and language
wiki = wikipediaapi.Wikipedia(user_agent=user_agent, language='en')
# Initialize Wikipedia API - This line is causing the error!
# wiki = wikipediaapi.Wikipedia('en')

# Function to fetch the summary based on the user's question
def get_answer(question):
    try:
        # Search for the Wikipedia page related to the question
        page = wiki.page(question)

        # If the page exists, return the first 500 characters of the summary
        if page.exists():
            return page.summary[0:500]  # Returns the first 500 characters
        else:
            return "Sorry, no answer found for this question."
    except Exception as e:
        return f"An error occurred: {str(e)}"

# Ask the user for a question
question = input("Ask a question: ")
answer = get_answer(question)
print(f"Answer: {answer}")

pip install flask

from flask import Flask, render_template, request
import wikipediaapi
import wikipediaapi
# Define your user agent
user_agent = "MyWikipediaApp/1.0 (your_email@example.com)"  # Replace with your info

# Initialize Wikipedia API with user agent and language
wiki = wikipediaapi.Wikipedia(user_agent=user_agent, language='en')
# Initialize Wikipedia API - This line is causing the error!
# wiki = wikipediaapi.Wikipedia('en')

# Function to fetch the summary based on the user's question
def get_answer(question):
    try:
        # Search for the Wikipedia page related to the question
        page = wiki.page(question)

        # If the page exists, return the first 500 characters of the summary
        if page.exists():
            return page.summary[0:500]  # Returns the first 500 characters
        else:
            return "Sorry, no answer found for this question."
    except Exception as e:
        return f"An error occurred: {str(e)}"

# Ask the user for a question
question = input("Ask a question: ")
answer = get_answer(question)
print(f"Answer: {answer}")

!pip install wikipedia-api

from flask import Flask, render_template, request
import wikipediaapi
# Define your user agent
user_agent = "MyWikipediaApp/1.0 (your_email@example.com)"  # Replace with your info

# Initialize Wikipedia API with user agent and language
wiki = wikipediaapi.Wikipedia(user_agent=user_agent, language='en')
# Initialize Wikipedia API - This line is causing the error!
# wiki = wikipediaapi.Wikipedia('en')

# Function to fetch the summary based on the user's question
def get_answer(question):
    try:
        # Search for the Wikipedia page related to the question
        page = wiki.page(question)

        # If the page exists, return the first 500 characters of the summary
        if page.exists():
            return page.summary[0:500]  # Returns the first 500 characters
        else:
            return "Sorry, no answer found for this question."
    except Exception as e:
        return f"An error occurred: {str(e)}"

# Ask the user for a question
question = input("Ask a question: ")
answer = get_answer(question)
print(f"Answer: {answer}")

!pip install wikipedia-api  # Make sure package is installed


import wikipediaapi

# Define your user agent
user_agent = "MyWikipediaApp/1.0 (your_email@example.com)"  # Replace with your info

# Initialize Wikipedia API with user agent and language
wiki = wikipediaapi.Wikipedia(user_agent=user_agent, language='en')

# ... (Rest of the code remains the same)

!pip install wikipedia-api  # Make sure package is installed

import wikipediaapi

# Define your user agent
user_agent = "MyWikipediaApp/1.0 (your_email@example.com)"  # Replace with your info

# Initialize Wikipedia API with user agent and language
wiki = wikipediaapi.Wikipedia(user_agent=user_agent, language='en')

# Function to fetch the summary based on the user's question
def get_answer(question):
    try:
        # Search for the Wikipedia page related to the question
        page = wiki.page(question)

        # If the page exists, return the first 500 characters of the summary
        if page.exists():
            return page.summary[0:500]  # Returns the first 500 characters
        else:
            return "Sorry, no answer found for this question."
    except Exception as e:
        return f"An error occurred: {str(e)}"

# Main loop to interact with the user
while True:
    question = input("Ask a question (or type 'exit' to quit): ")
    if question.lower() == 'exit':
        break
    answer = get_answer(question)
    print(f"Answer: {answer}\n")

from flask import Flask, render_template, request
import wikipedia

# Initialize Flask app
app = Flask(__name__)

# Function to search and fetch the best answer
def get_answer(question):
    try:
        # Search Wikipedia for related pages
        search_results = wikipedia.search(question)

        if search_results:
            # Take the first best match
            page_title = search_results[0]
            # Fetch the summary
            summary = wikipedia.summary(page_title, sentences=5)
            return summary
        else:
            return "Sorry, no related article found."
    except Exception as e:
        return f"An error occurred: {str(e)}"

# Route for home page
@app.route("/", methods=["GET", "POST"])
def home():
    answer = ""
    if request.method == "POST":
        question = request.form["question"]
        answer = get_answer(question)
    return render_template("index.html", answer=answer)

# Run the app
if __name__ == "__main__":
    app.run(debug=True)

!pip install wikipedia

!pip install wikipedia  # Install the correct package

import wikipedia

# Set language
wikipedia.set_lang('en')

# Function to fetch the answer
def get_answer(question):
    try:
        # Search pages related to the question
        search_results = wikipedia.search(question)

        if not search_results:
            return "Sorry, no answer found for this question."

        # Get the most relevant page
        page = wikipedia.page(search_results[0])

        # Return the first 500 characters of the summary
        return page.summary[0:500]

    except wikipedia.exceptions.DisambiguationError as e:
        return f"Your query is too broad. Options: {e.options}"
    except wikipedia.exceptions.PageError:
        return "Sorry, page not found."
    except Exception as e:
        return f"An error occurred: {str(e)}"

# Main loop
while True:
    question = input("Ask a question (or type 'exit' to quit): ")
    if question.lower() == 'exit':
        break
    answer = get_answer(question)
    print(f"Answer: {answer}\n")